BASE_URL = 'http://kelbytv.com'
YT_SEARCH_URL = 'http://gdata.youtube.com/feeds/api/videos?q=%s&author=kelbymediagroup&orderby=relevance&start-index=1&max-results=1&v=2&alt=json'
RE_EP_INDEX = Regex('Episode (?P<ep_index>[0-9]+)')
RE_CLEANUP = Regex('[^-a-z0-9 ]')

####################################################################################################
def MetadataObjectForURL(url):

	try:
		page = HTML.ElementFromURL(url)
	except Ex.HTTPError, e:
		if e.code == 404:
			raise Ex.MediaNotAvailable
		if e.code == 410:
			raise Ex.MediaExpired

	show = page.xpath('//title')[0].text.rsplit(' | ', 1)[1].strip()
	episode_title = page.xpath('//h2[@class="episodetitle"]/span/text()')[0]
	summary = page.xpath('//div[contains(@class, "showinfo")]//div[@class="quickabout"]//strong')[0].text.strip()
	thumb = page.xpath('//video[@id="player"]')[0].get('poster')
	if thumb.startswith('http') == False:
		thumb = BASE_URL + thumb

	try:
		index = int(RE_EPISODE.search(episode_title).group('ep_index'))
	except:
		index = None

	published = page.xpath('//div[contains(@class, "showinfo")]/p[@class="meta"]/text()')[0].strip('Published:').strip()
	originally_available_at = Datetime.ParseDate(published)

	return EpisodeObject(
		show = show,
		title = episode_title,
		index = index,
		summary = summary,
		originally_available_at = originally_available_at,
		thumb = Resource.ContentsOfURLWithFallback(url=thumb)
	)

####################################################################################################
def MediaObjectsForURL(url):

	return [
		MediaObject(
			parts = [PartObject(key=Callback(PlayVideo, url=url, res='720'))],
			container = Container.MP4,
			video_codec = VideoCodec.H264,
			video_resolution = '720',
			audio_codec = AudioCodec.AAC,
			audio_channels = 2,
			optimized_for_streaming = True
		),
		MediaObject(
			parts = [PartObject(key=Callback(PlayVideo, url=url, res='480'))],
			container = Container.MP4,
			video_codec = VideoCodec.H264,
			video_resolution = '480',
			audio_codec = AudioCodec.AAC,
			audio_channels = 2,
			optimized_for_streaming = True
		)
	]

####################################################################################################
@indirect
def PlayVideo(url, res='720'):

	page = HTML.ElementFromURL(url)
	show = page.xpath('//title')[0].text.rsplit(' | ', 1)[1].strip().lower()
	episode_title = page.xpath('//h2[@class="episodetitle"]/span/text()')[0].lower()

	if episode_title.startswith(show):
		query = episode_title
	else:
		query = '%s %s' % (show, episode_title)

	query = String.StripDiacritics(query)
	query = RE_CLEANUP.sub('', query).strip()

	json_obj = JSON.ObjectFromURL(YT_SEARCH_URL % String.Quote(query))

	if not 'entry' in json_obj['feed']:
		raise Ex.MediaNotAvailable

	yt_url = json_obj['feed']['entry'][0]['media$group']['media$player']['url']

	media = URLService.MediaObjectsForURL(yt_url)
	resolutions = ['720', '480', 'sd']
	index = resolutions.index(res)

	for resolution_index in range(index, len(resolutions)):
		current_resolution = resolutions[resolution_index]

		for video in media:
			if video.container != Container.MP4 or video.video_codec != VideoCodec.H264:
				continue

			if str(video.video_resolution) == current_resolution:
				return Redirect(video.parts[0].key)

	return Redirect(media[-1].parts[0].key)
