def NormalizeURL(url):

  return url.split('?')[0]

####################################################################################################
def MetadataObjectForURL(url):

  html = HTML.ElementFromURL(url, cacheTime=7200)
  yt_iframe = html.xpath('//iframe[contains(@src, "youtube.com/embed/")]/@src')

  if len(yt_iframe) > 0:
    return URLService.MetadataObjectForURL(yt_iframe[0])

  title = html.xpath('//title/text()')[0].strip(' - Do Lectures')
  summary = html.xpath('//section[@id="video-details"]//p/text()')[0]
  thumb_url = html.xpath('//video/@poster')[0]

  # Construct a metadata item
  return VideoClipObject(
    title = title,
    summary = summary,
    thumb = thumb_url
  )

####################################################################################################
def MediaObjectsForURL(url):

  return [
    MediaObject(
      parts = [PartObject(key=Callback(PlayVideo, url=url, fmt='720'))],
      container = Container.MP4,
      bitrate = '895',
      video_resolution = '720',
      #aspect_ratio = '1.78',
      video_codec = VideoCodec.H264,
      audio_codec = AudioCodec.AAC,
      optimized_for_streaming = True
    ),
    MediaObject(
      parts = [PartObject(key=Callback(PlayVideo, url=url, fmt='sd'))],
      container = Container.MP4,
      bitrate = '495',
      video_resolution = 'sd',
      #aspect_ratio = '1.78',
      video_codec = VideoCodec.H264,
      audio_codec = AudioCodec.AAC,
      optimized_for_streaming = True
    )
  ]

####################################################################################################
@indirect
def PlayVideo(url, fmt='720'):

  try:
    html = HTML.ElementFromURL(url, cacheTime=7200)
  except:
    raise Ex.MediaNotAvailable

  if fmt == '720':
    video_url = html.xpath('//source[contains(@type, "video/mp4")]/@src')[0]
  else:
    video_url = html.xpath('//video/@data-iphone-video-url')[0]

  return IndirectResponse(VideoClipObject, key=video_url)
