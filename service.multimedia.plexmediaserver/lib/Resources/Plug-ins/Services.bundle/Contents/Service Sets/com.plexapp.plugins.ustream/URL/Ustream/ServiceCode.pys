USTREAM_CH_JSON = 'http://api.ustream.tv/channels/%s.json'
USTREAM_REC_JSON = 'http://api.ustream.tv/videos/%s.json'

USTREAM_IPHONE_URL = 'http://iphone-streaming.ustream.tv/uhls/%s/streams/live/iphone/playlist.m3u8'
USTREAM_REC_URL = 'http://www.ustream.tv/recorded/%s'

RE_RECORDED_ID = Regex('/recorded/(\d+)')
RE_PROGRESSED = Regex('#PROGRESSED (\d+)%')

####################################################################################################
def NormalizeURL(url):

	if '/recorded/' in url:

		# For recorded videos, the video ID should be in the URL...
		video_id = RE_RECORDED_ID.search(url)

		if not video_id:
			raise Ex.MediaNotAvailable

		url = USTREAM_REC_URL % video_id.group(1)

	return url.split('#')[0]

####################################################################################################
def MetadataObjectForURL(url):

	if '/recorded/' in url:

		# For recorded videos, the video ID should be in the URL...
		video_id = RE_RECORDED_ID.search(url)

		if not video_id:
			raise Ex.MediaNotAvailable

		try:
			json_obj = JSON.ObjectFromURL(USTREAM_REC_JSON % (video_id.group(1)))['video']
		except:
			raise Ex.MediaNotAvailable

		title = json_obj['title']
		summary = json_obj['description']
		duration = int(float(json_obj['length'])*1000)
		thumb = json_obj['thumbnail']['default']
		thumb_large = thumb.replace('192x108', '640x360')

		return VideoClipObject(
			title = title,
			summary = summary,
			duration = duration,
			thumb = Resource.ContentsOfURLWithFallback([thumb_large, thumb])
		)

	else:

		# For live channels, look for a video ID in the HTML...
		try:
			html = HTML.ElementFromURL(url)
		except:
			raise Ex.MediaNotAvailable

		video_id = html.xpath('//a[@data-content-id]/@data-content-id')

		if len(video_id) < 1:
			raise Ex.MediaNotAvailable

		try:
			json_obj = JSON.ObjectFromURL(USTREAM_CH_JSON % (video_id[0]))['channel']
		except:
			raise Ex.MediaNotAvailable

		if json_obj['status'] != 'live':
			raise Ex.LiveMediaNotStarted

		title = json_obj['title']
		summary = json_obj['description']
		thumb = json_obj['thumbnail']['live']
		thumb_large = thumb.replace('192x108', '640x360')

		return VideoClipObject(
			title = title,
			summary = summary,
			thumb = Resource.ContentsOfURLWithFallback([thumb_large, thumb])
		)

####################################################################################################
def MediaObjectsForURL(url):

	if '/recorded/' in url:

		return [
			MediaObject(
				parts = [
					PartObject(key=Callback(PlayRecorded, url=url))
				],
				container = Container.MP4,
				video_codec = VideoCodec.H264,
				video_resolution = 'sd',
				audio_codec = AudioCodec.AAC,
				audio_channels = 2,
				optimized_for_streaming = True
			)
		]

	else:

		return [
			MediaObject(
				parts = [
					PartObject(key=HTTPLiveStreamURL(Callback(PlayLive, url=url)))
				],
				video_resolution = '480',
				audio_channels = 2,
				optimized_for_streaming = True
			)
		]

####################################################################################################
@indirect
def PlayRecorded(url):

	if not '/recorded/' in url:
		raise Ex.MediaNotAvailable

	video_id = RE_RECORDED_ID.search(url)

	if not video_id:
		raise Ex.MediaNotAvailable

	json_obj = JSON.ObjectFromURL(USTREAM_REC_JSON % (video_id.group(1)))['video']

	if 'media_urls' in json_obj and 'flv' in json_obj['media_urls']:
		return IndirectResponse(VideoClipObject, key=json_obj['media_urls']['flv'])
	else:
		raise Ex.MediaNotAvailable

####################################################################################################
def PlayLive(url):

	try:
		html = HTML.ElementFromURL(url)
	except:
		raise Ex.MediaNotAvailable

	video_id = html.xpath('//a[@data-content-id]/@data-content-id')

	if len(video_id) < 1:
		raise Ex.MediaNotAvailable

	if StreamIsReady(video_id[0]):
		return Redirect(USTREAM_IPHONE_URL % video_id[0])
	else:
		raise Ex.LiveMediaNotStarted

####################################################################################################
def StreamIsReady(video_id, i=0, progressed=0):

	url = USTREAM_IPHONE_URL % video_id

	Log(' --> url: %s' % url)
	Log(' -->   i: %d' % i)

	if i < 20:
		try:
			playlist = HTTP.Request(url, cacheTime=0, sleep=1.0).content
		except:
			return False

		if '#PROGRESSED' in playlist:
			progress = int(RE_PROGRESSED.search(playlist).group(1))
			Log(' --> progress: %d' % progress)

			if progress > progressed:
				return StreamIsReady(video_id=video_id, i=i, progressed=progress)
			else:
				return StreamIsReady(video_id=video_id, i=i+1, progressed=progress)
		else:
			i = 99 # Fix Laika HLS sillyness
			return True
	else:
		return False
