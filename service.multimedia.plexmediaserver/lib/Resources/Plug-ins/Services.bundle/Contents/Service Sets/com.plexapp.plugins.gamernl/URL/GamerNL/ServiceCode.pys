BASE_URL = 'http://www.gamer.nl'
NAMESPACES = {'media': 'http://search.yahoo.com/mrss/', 'jwplayer': 'http://developer.longtailvideo.com/trac/wiki/FlashFormats'}
RE_XML_URL = Regex('addVariable\("file","(.+?)"\)')

####################################################################################################
def NormalizeURL(url):

	url = url.replace('?hd', '').replace('?sd', '')
	return url

####################################################################################################
def MetadataObjectForURL(url):

	# We'll attempt to find the reference to the xml file which contains all the details with the
	# associated title.
	content = HTTP.Request(url).content
	xml_url = RE_XML_URL.search(content)

	if xml_url:
		xml_url = BASE_URL + xml_url.group(1)

		# Extract the available information.
		xml = GetXML(xml_url)
		title = xml.xpath("//title/text()", namespaces = NAMESPACES)[0]
		thumb = xml.xpath("//jwplayer:image/text()", namespaces = NAMESPACES)[0]

		return VideoClipObject(
			title = title,
			thumb = thumb)

####################################################################################################
def MediaObjectsForURL(url):
	return [
		MediaObject(
			video_codec = VideoCodec.H264,
			audio_codec = AudioCodec.AAC,
			container = Container.MP4,
			video_resolution = '540',
			optimized_for_streaming = True,
			parts = [PartObject(key=Callback(PlayVideo, url=url, res='hd'))]
		),
		MediaObject(
			video_codec = VideoCodec.H264,
			audio_codec = AudioCodec.AAC,
			container = Container.MP4,
			video_resolution = '360',
			optimized_for_streaming = True,
			parts = [PartObject(key=Callback(PlayVideo, url=url, res='sd'))]
		)
	]

####################################################################################################
def PlayVideo(url, res):

	# The url will have been originally normalized to remove any quality setting. We should add it
	# back, based upon the specified resolution.
	if res == 'hd':
		url = url + '?hd'
	else:
		url = url + '?sd'

	# We'll attempt to find the reference to the xml file which contains all the details with the associated title.
	content = HTTP.Request(url).content
	xml_url = RE_XML_URL.search(content)

	if xml_url:
		xml_url = BASE_URL + xml_url.group(1)

		xml = GetXML(xml_url)
		video_url = xml.xpath("//media:content", namespaces = NAMESPACES)[0].get('url')
		return Redirect(video_url)


####################################################################################################
def GetXML(xml_url):
	xml_content = HTTP.Request(xml_url, cacheTime = 1).content

    # It appears that it's possible for the RSS feed to actually be invalid causing the XML code to
    # raise an exception. The currently known issues that we have to deal with are as follows:
    #    - The use of '&' instead of '&amp;'
    #    - The inclusion of '<?xml version="1.0" encoding="UTF-8" ?>' at the beginning of the document.
	if xml_content.startswith('<?xml') == True:
		xml_content = xml_content[xml_content.find('?>') + 2:]

	if xml_content.find(' & ') != -1:
		xml_content = xml_content.replace(' & ', ' &amp; ')

	return XML.ElementFromString(xml_content)

####################################################################################################
def TestURLs():
	test_urls = []

	for url in HTML.ElementFromURL('http://www.gamer.nl/video').xpath('//a[contains(@href, "/video/")]'):
		href = BASE_URL + url.get('href')

		if len(test_urls) < 4:
			if href not in test_urls:
				test_urls.append(href)
		else:
			break

	return test_urls
