HTTP_HEADERS = {
	'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.8; rv:21.0) Gecko/20100101 Firefox/21.0'
}

####################################################################################################
def MetadataObjectForURL(url):

	html = HTML.ElementFromURL(url, headers=HTTP_HEADERS, cacheTime=CACHE_1WEEK)

	title = html.xpath('//title/text()')[0].strip()
	summary = html.xpath('//meta[@name="description"]/@content|//meta[@name="og:description" or @property="og:description"]/@content')[0]
	summary = String.StripTags(summary).strip()
	thumb = html.xpath('//meta[@property="og:image"]/@content')[0].replace('-150x150.jpg', '.jpg')

	try:
		date = html.xpath('//time/@datetime')[0]
		date = Datetime.ParseDate(date).date()
	except:
		date = None

	if '/fxguidetv/' in url:
		return VideoClipObject(
			title = title,
			summary = summary,
			thumb = Resource.ContentsOfURLWithFallback(thumb),
			originally_available_at = date
		)
	else:
		return TrackObject(
			title = title,
			thumb = Resource.ContentsOfURLWithFallback(thumb)
		)

####################################################################################################
def MediaObjectsForURL(url):

	if '/fxguidetv/' in url:
		return [
			MediaObject(
				container = Container.MP4,
				video_codec = VideoCodec.H264,
				video_resolution = '540',
				audio_codec = AudioCodec.AAC,
				audio_channels = 2,
				optimized_for_streaming = True,
				parts = [
					PartObject(
						key=Callback(PlayVideo, url=url)
					)
				]
			)
		]
	else:
		return [
			MediaObject(
				audio_codec = AudioCodec.MP3,
				audio_channels = 2,
				parts = [
					PartObject(
						key=Callback(PlayVideo, url=url, ext='.mp3')
					)
				]
			)
		]

####################################################################################################
def PlayVideo(url, res=None):

	html = HTML.ElementFromURL(url, headers=HTTP_HEADERS, cacheTime=CACHE_1WEEK)
	content_url = html.xpath('//div[@class="single-podcast-actions"]/a/@href')

	if len(content_url) < 1:
		raise Ex.MediaNotAvailable

	return Redirect(content_url[0])
