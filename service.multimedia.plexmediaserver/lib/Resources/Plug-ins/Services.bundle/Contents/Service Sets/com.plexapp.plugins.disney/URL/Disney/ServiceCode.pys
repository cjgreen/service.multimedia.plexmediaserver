HTTP_HEADERS = {'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/36.0.1985.143 Safari/537.36'}
JSON_URL = 'http://%s/_grill/json/watch/%s'

AudioStreamObject.language_code = Locale.Language.English

####################################################################################################
def NormalizeURL(url):

	return url.split('?')[0].split('#')[0]

####################################################################################################
def MetadataObjectForURL(url):

	json_obj = GetJSON(url)

	if not json_obj:
		raise Ex.MediaNotAvailable

	title = json_obj['title']
	summary = json_obj['description']
	duration = int(json_obj['duration_sec'])*1000
	thumb = json_obj['thumb']

	if 'Full Episode' in json_obj['vType'] and 'ptitle' in json_obj:
		show_title = json_obj['ptitle']

		return EpisodeObject(
			title = title,
			summary = summary,
			duration = duration,
			thumb = Resource.ContentsOfURLWithFallback(thumb),
			show = show_title
		)
	else:
		return VideoClipObject(
			title = title,
			summary = summary,
			duration = duration,
			thumb = Resource.ContentsOfURLWithFallback(thumb)
		)

####################################################################################################
def MediaObjectsForURL(url):

	return [
		MediaObject(
			parts = [
				PartObject(
					key = HTTPLiveStreamURL(Callback(PlayVideo, url=url))
				)
			],
			video_resolution = 'sd',
			audio_channels = 2,
			optimized_for_streaming = True
		)
	]

####################################################################################################
@indirect
def PlayVideo(url, **kwargs):

	json_obj = GetJSON(url)

	if not json_obj or not 'flavors' in json_obj:
		raise Ex.MediaExpired

	for flavor in json_obj['flavors']:

		if flavor['format'] == 'applehttp' and '/master/' in flavor['url']:

			if not flavor['url'].startswith('http://'):

				host = url.split('/')[2]
				flavor['url'] = 'http://%s%s' % (host, flavor['url'])

			return IndirectResponse(VideoClipObject, key=HTTPLiveStreamURL(flavor['url']))

	raise Ex.MediaNotAvailable

####################################################################################################
def GetJSON(url):

	host = url.split('/')[2]
	path = url.split('/watch/')[-1]

	try:
		json = JSON.ObjectFromURL(JSON_URL % (host, path))
		return json['stack'][0]['data'][0]
	except:
		return None
