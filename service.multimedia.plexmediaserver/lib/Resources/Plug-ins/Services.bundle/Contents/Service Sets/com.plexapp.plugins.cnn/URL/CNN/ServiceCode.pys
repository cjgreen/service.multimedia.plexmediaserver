XML_URL = 'http://www.cnn.com/video/data/3.0/video/%s/index.xml'
MEDIA_URL = 'http://ht.cdn.turner.com/cnn/big/%s'
CNN_URL = 'http://www.cnn.com/video/'
NAMESPACES = {'smil': 'http://www.w3.org/2001/SMIL20/Language'}

####################################################################################################
def NormalizeURL(url):

	url = String.Unquote(url)
	rel_url = None

	if '/video/' in url:
		rel_url = url.split('/video/')[-1]

	if rel_url:
		url = '%s?/video/%s' % (CNN_URL, rel_url)

	return url.replace('.html', '')

####################################################################################################
def TestURLs():

	test_urls = []
	cnn = XML.ElementFromURL('http://www.cnn.com/.element/ssi/www/auto/2.0/video/xml/by_section_world.xml')

	for video in cnn.xpath('//video'):
		if len(test_urls) < 3:
			video_id = video.xpath('./video_id')[0].text
			video_url = CNN_URL + '?' + video_id

			if video_url not in test_urls:
				test_urls.append(video_url)
		else:
			break

	return test_urls

####################################################################################################
def MetadataObjectForURL(url):

	data_url = XML_URL % url.split('/?/video/')[1]

	try:
		data = XML.ElementFromURL(data_url, cacheTime=CACHE_1DAY)
	except:
		raise Ex.MediaNotAvailable

	thumb_list = data.xpath('//image')
	thumb_list = sorted(thumb_list, key = lambda thumb: int(thumb.get("height")), reverse=True)[0:2]
	summary = data.xpath('//description')[0].text

	try:
		date = data.xpath('//dateCreated')[0].text
		originally_available_at = Datetime.ParseDate(date).date()
	except: originally_available_at = None

	try:
		duration = data.xpath('//length')[0].text
		durationParts = duration.split(':')

		if durationParts[0] == '':
			duration = int(durationParts[1])*1000
		else:
			duration = ((int(durationParts[0])*60) + int(durationParts[1]))*1000
	except: duration = None

	try: show = data.xpath('//branding')[0].text
	except: show = ''

	clip_title = data.xpath('//headline')[0].text

	return EpisodeObject(
		title = clip_title,
		originally_available_at = originally_available_at,
		duration = duration,
		summary = summary,
		tags = [show],
		thumb = Resource.ContentsOfURLWithFallback([thumb.text for thumb in thumb_list])
	)

####################################################################################################
def MediaObjectsForURL(url):

	return [
		MediaObject(
			parts = [PartObject(key=Callback(PlayVideo, url=url, resolution='1280x720'))],
			container = Container.MP4,
			optimized_for_streaming = True,
			aspect_ratio = '1.78',
			video_resolution = '720',
			video_codec = VideoCodec.H264,
			audio_codec = AudioCodec.AAC,
			audio_channels = 2
		),
		MediaObject(
			parts = [PartObject(key=Callback(PlayVideo, url=url, resolution='896x504'))],
			container = Container.MP4,
			optimized_for_streaming = True,
			aspect_ratio = '1.78',
			video_resolution = '504',
			video_codec = VideoCodec.H264,
			audio_codec = AudioCodec.AAC,
			audio_channels = 2
		),
		MediaObject(
			parts = [PartObject(key=Callback(PlayVideo, url=url, resolution='768x432'))],
			container = Container.MP4,
			optimized_for_streaming = True,
			aspect_ratio = '1.78',
			video_resolution = '432',
			video_codec = VideoCodec.H264,
			audio_codec = AudioCodec.AAC,
			audio_channels = 2
		),
		MediaObject(
			parts = [PartObject(key=Callback(PlayVideo, url=url, resolution='640x360'))],
			container = Container.MP4,
			optimized_for_streaming = True,
			aspect_ratio = '1.78',
			video_resolution = '360',
			video_codec = VideoCodec.H264,
			audio_codec = AudioCodec.AAC,
			audio_channels = 2
		)
	]

####################################################################################################
@indirect
def PlayVideo(url, resolution):

	video = None
	data_url = XML_URL % url.split('/?/video/')[1]

	try:
		data = XML.ElementFromURL(data_url, cacheTime=CACHE_1DAY)
	except:
		raise Ex.MediaExpired

	try:
		other_source = data.xpath('//groupFiles/file[contains(text(), ".smil")]/text()')[0]
		xml = XML.ElementFromURL(other_source)
		clip = xml.xpath('//smil:video[contains(@src, "%s")]/@src' % resolution, namespaces=NAMESPACES)[0]
		video = 'http://ht.cdn.turner.com/%s' % clip
	except:
		pass

	if not video:
		available_bitrates = data.xpath('//file[contains(., ".mp4")]/@bitrate')
		available_bitrates = [int(bitrate.split('x')[-1]) for bitrate in available_bitrates]
		closest = min((abs(int(resolution.split('x')[-1]) - i), i) for i in available_bitrates)[1]
		video = data.xpath('//file[contains(@bitrate, "x%d")]/text()' % closest)[0]

	# Some videos do not have the appropriate base URL
	if video and not video.startswith('http://'):
		video = MEDIA_URL % video

	if not video:
		other_videos = data.xpath('//groupFiles/file[contains(text(), "%s")]/text()' % resolution)
		if len(other_videos) > 0:
			base = data.xpath('//groupFiles/baseUrl/text()')[0]
			clip = other_videos[0]
			video = '%s/%s' % (base, clip)

	if not video:
		raise Ex.MediaNotAvailable

	return IndirectResponse(VideoClipObject, key=video)
