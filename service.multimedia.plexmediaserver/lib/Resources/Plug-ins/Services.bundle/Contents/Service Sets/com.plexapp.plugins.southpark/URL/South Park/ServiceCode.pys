MRSS_URL = 'http://%s/feeds/video-player/mrss/%s'
NAMESPACES = {'media': 'http://search.yahoo.com/mrss/'}

RE_EP_DATA = Regex('\/s(?P<season>\d+)e(?P<episode>\d+)\-')
RE_URI = Regex('swfobject.embedSWF\("http://.+?/(mgid.+?)",')
RE_AMPERSANDS = Regex('&(?!amp;)')
RE_BITRATE = Regex('_(\d+)(?:kbps)?\.mp4')

MediaObject.audio_channels = 2
MediaObject.optimized_for_streaming = True

####################################################################################################
def NormalizeURL(url):

	return url.split('?')[0]

####################################################################################################
def MetadataObjectForURL(url):

	try:
		html = HTML.ElementFromURL(url, follow_redirects=False)
	except Ex.HTTPError, e:
		if e.code == 404:
			Log('HTTP 404 Not Found for URL: %s' % url)
			raise Ex.MediaNotAvailable
		else:
			raise Ex.MediaNotAvailable
	except Ex.RedirectError, e:
		if 'Location' in e.headers:
			if e.headers['Location'] == url:
				Log('Redirect loop for URL: %s' % url)
				raise Ex.MediaNotAvailable
			else:
				return URLService.MetadataObjectForURL(e.headers['Location'])
		else:
			raise Ex.MediaNotAvailable
	except:
		raise Ex.MediaNotAvailable

	title = html.xpath('//meta[@property="og:title"]/@content')[0].split(' (Season')[0]
	summary = html.xpath('//meta[@property="og:description"]/@content|//meta[@name="og:description"]/@content')[0]
	thumb = html.xpath('//meta[@property="og:image"]/@content')[0].split('?')[0].replace('_4x3.jpg', '_16x9.jpg')

	if '/full-episodes/' in url:
		ep_data = RE_EP_DATA.search(url).groupdict()
		season = ep_data['season']
		index = ep_data['episode']

		return EpisodeObject(
			title = title,
			show = "South Park",
			season = int(season),
			index = int(index),
			summary = summary,
			thumb = Resource.ContentsOfURLWithFallback(url=thumb)
		)
	else:
		return VideoClipObject(
			title = title,
			summary = summary,
			thumb = Resource.ContentsOfURLWithFallback(url=thumb)
		)

####################################################################################################
@deferred
def MediaObjectsForURL(url):

	html = HTML.ElementFromURL(url)
	mgid = html.xpath('//*[@id="player_page_player"]/@data-mgid|//*[@data-now-playing]/@data-now-playing')

	if len(mgid) < 1:
		page = HTML.StringFromElement(html)
		mgid = RE_URI.search(page)

		if not mgid:
			raise Ex.MediaNotAvailable
		else:
			mgid = mgid.group(1)
	else:
		mgid = mgid[0]

	if not mgid.startswith('mgid:'):
		mgid = 'mgid:arc:episode:southparkstudios.com:%s' % (mgid)

	host = url.split('/')[2]

	mrss_data = HTTP.Request(MRSS_URL % (host, mgid)).content
	mrss_data = RE_AMPERSANDS.sub('&amp;', mrss_data)
	mrss_data = XML.ElementFromString(mrss_data)

	media_urls = mrss_data.xpath('//media:content[@medium="video"]/@url', namespaces=NAMESPACES)

	available_streams = {}

	for media_url in media_urls:

		try:
			video_data = XML.ElementFromURL(media_url)
		except:
			raise Ex.MediaNotAvailable

		renditions = video_data.xpath('//rendition[@type="video/mp4"]')

		if len(renditions) < 1:
			raise Ex.MediaNotAvailable

		for rendition in renditions:

			if int(rendition.get('height')) < 360:
				continue

			rtmp_url = rendition.xpath('./src/text()')[0]

			if '/intros/' in rtmp_url:
				continue

			if '/viacomccstrm/' in rtmp_url:
				clip = rtmp_url.split('/viacomccstrm/')[-1]
			elif '/viacomspstrm/' in rtmp_url:
				clip = rtmp_url.split('/viacomspstrm/')[-1]
			elif '/mtvnorigin/' in rtmp_url:
				clip = rtmp_url.split('/mtvnorigin/')[-1]
			else:
				Log('Failed to split the rmtp_url to find clip: %s' % (rtmp_url))
				raise Ex.MediaNotAvailable

			bitrate = RE_BITRATE.search(clip).group(1)

			if bitrate not in available_streams:
				available_streams[bitrate] = []

			part = {}
			part['duration'] = rendition.get('duration')
			part['height'] = rendition.get('height')
			part['clip'] = clip

			available_streams[bitrate].append(part)

	media_objects = []
	bitrates = [int(i) for i in available_streams.keys()]
	bitrates.sort(reverse=True)

	for bitrate in bitrates:

		parts = []

		for part in available_streams[str(bitrate)]:

			parts.append(
				PartObject(
					key = RTMPVideoURL(
						url='rtmpe://viacommtvstrmfs.fplive.net:1935/viacommtvstrm',
						clip='mp4:%s' % (part['clip'])
					),
					duration = int(part['duration'])*1000
				)
			)

			video_resolution = int(part['height'])

		media_objects.append(
			MediaObject(
				parts = parts,
				bitrate = bitrate,
				video_resolution = video_resolution
			)
		)

	return media_objects
