from hashlib import sha1
import binascii, hmac

RE_PLAYLIST = Regex('aetv_video":(.+?)\}', Regex.DOTALL)
RE_BASE = Regex('meta base="(rtmp.+)"')

SMIL_NS = {'a': 'http://www.w3.org/2005/SMIL21/Language'}
RESOLUTIONS = ['540','432','404','360']

AudioStreamObject.language_code = Locale.Language.English

####################################################################################################
def NormalizeURL(url):

  return url.split('?')[0]

####################################################################################################
def TestURLs():

  test_urls = []
  data = HTML.ElementFromURL('http://www.aetv.com/video')

  for url in data.xpath('//ul[contains(@class,"full-episode-ul")]/li//a/@href'):
    if not url.startswith('http:'):
      url = 'http://www.aetv.com' + url
    test_urls.append(url)

    if len(test_urls) > 2:
      break

  return test_urls

####################################################################################################
def MetadataObjectForURL(url):

  releaseURL = '%s&format=script' % GetSMIL(url)
  data = JSON.ObjectFromURL(releaseURL)

  thumb = data['defaultThumbnailUrl']
  thumb_large = thumb.replace('_small.jpg', '_HD_768x432-16x9.jpg')

  summary = data['description']
  duration = data['duration']
  date = Datetime.FromTimestamp(float(data['pubDate'])/1000).date()
  content_rating = data['ratings'][0]['rating'] if len(data['ratings']) > 0 else None
  title = data['title']

  if data['AETN$mrssLengthType'] == "Episode":
    show = data['AANDE$seriesName']
    index = int(data['AETN$episode']) if 'AETN$episode' in data else None

    return EpisodeObject(
      title = title,
      show = show,
      summary = summary,
      absolute_index = index,
      duration = duration,
      originally_available_at = date,
      content_rating = content_rating,
      thumb = Resource.ContentsOfURLWithFallback([thumb_large, thumb])
    )
  else:
    return VideoClipObject(
      title = title,
      summary = summary,
      duration = duration,
      originally_available_at = date,
      content_rating = content_rating,
      thumb = Resource.ContentsOfURLWithFallback(thumb)
    )

####################################################################################################
def MediaObjectsForURL(url):

  media_objects = []

  for res in RESOLUTIONS:
    media_objects.append(
      MediaObject(
        parts = [PartObject(key=Callback(PlayVideo, url=url, res=res))],
          container = Container.MP4,
          video_codec = VideoCodec.H264,
          video_resolution = res,
          audio_codec = AudioCodec.AAC
        )
      )

  return media_objects

####################################################################################################
@indirect
def PlayVideo(url, res):

  url = URLService.NormalizeURL(url)

  smil_url = GetSMIL(url)
  smil_url = smil_url.replace('switch=hds', 'format=SMIL')
  sig = sign_url(smil_url)
  smil_url = '%s&sig=%s' % (smil_url, sig)

  smil = XML.ElementFromURL(smil_url)
  index = RESOLUTIONS.index(res)
  video_url = None

  if smil.xpath('//a:ref', namespaces=SMIL_NS)[0].get('title') == "Geographic Restriction":
    raise Ex.MediaGeoblocked

  while index < len(RESOLUTIONS):
    for video in smil.xpath("//a:video", namespaces=SMIL_NS):
      if video.get('height') == RESOLUTIONS[index]:
        video_url = video.get('src')
        break

    index += 1

    if video_url:
      break

  # try falling back to the default //video/@src if we have one
  # (like for older style flv based videos)
  if not video_url:
    video_url = smil.xpath('//a:video/@src', namespaces=SMIL_NS)[0]

  # now if we still don't have a video_url bail
  if not video_url:
    raise Ex.MediaNotAvailable

  if video_url.startswith('http://'):
    return IndirectResponse(VideoClipObject, key=video_url)
  elif video_url.startswith('flv:'):
    smil_string = HTTP.Request(smil_url).content
    rtmp_base = RE_BASE.search(smil_string).group(1)
    rtmp_clip = video_url.replace("flv:","").replace(".flv?","?")
    return IndirectResponse(VideoClipObject, key=RTMPVideoURL(url=rtmp_base, clip=rtmp_clip))
  elif video_url.startswith('MP4:') or video_url.startswith('mp4:'):
    smil_string = HTTP.Request(smil_url).content
    rtmp_base = RE_BASE.search(smil_string).group(1)
    rtmp_clip = video_url
    return IndirectResponse(VideoClipObject, key=RTMPVideoURL(url=rtmp_base, clip=rtmp_clip))
  else:
    raise Ex.MediaNotAvailable

####################################################################################################
def GetSMIL(url):

  try:
    content = HTTP.Request(url).content.decode('utf8','replace')
  except:
    raise Ex.MediaExpired

  playlist = RE_PLAYLIST.search(content).group(1)
  playlist = playlist + '}'
  playlist = "[%s]" % playlist.strip().replace('\n', '')
  playlist_json = JSON.ObjectFromString(playlist)

  #Log('the value of playlist_json is %s' %playlist_json)
  if not 'releaseURL' in playlist_json[0]:
    raise Ex.MediaNotAvailable

  SMIL_URL = '%s?%s' % (playlist_json[0]['releaseURL'], playlist_json[0]['flashReleaseUrlParams'])
  info_url = '%s&format=script' % SMIL_URL
  data = JSON.ObjectFromURL(info_url)
  blocked = data['AETN$isBehindWall']

  if blocked:
    raise Ex.MediaNotAuthorized
  else:
    return SMIL_URL

  raise Ex.MediaNotAvailable

####################################################################################################
def sign_url(url):

  hmac_key = 'crazyjava'
  SEC_HEX = '733363723374' #'s3cr3t'
  expiration = get_expiration()
  path = url.split('http://link.theplatform.com/s/')[1].split('?')[0]
  sign_data = binascii.unhexlify('00'+expiration+binascii.hexlify(path).lower())
  sig = hmac.new(hmac_key, sign_data, sha1)
  sigHEX = sig.hexdigest()
  signature = '00' + expiration + sigHEX + SEC_HEX
  return signature

####################################################################################################
def get_expiration(auth_length=600):

  current_time = Datetime.TimestampFromDatetime(Datetime.Now()) + auth_length
  expiration = ('%0.2X' % current_time).lower()
  return expiration
