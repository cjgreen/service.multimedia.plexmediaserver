RE_KEY_URI = Regex('URI *= *"(.*)"')
USER_AGENT = 'AppleCoreMedia/1.0.0.11A501 (iPad; U; CPU OS 7_0_2 like Mac OS X; en_us)'

####################################################################################################
def NormalizeURL(url):

    url = url.replace("?start=auto&", "?").replace("?start=auto", "")
    if 'type=embed' in url:
        url = url.split('type=embed')[0].strip('&?')

    return url

####################################################################################################
def MetadataObjectForURL(url):
    try:
        headers = HTTP.Request(url + '?output=json').headers
        page = HTML.ElementFromURL(url)
    except:
        raise Ex.MediaNotAvailable
        
    show = None
    title = page.xpath('//meta[@property="og:title"]/@content')[0].split(' | ')[0].replace('&amp;', '&')
    title = String.DecodeHTMLEntities(title)

    if ' - ' in title:
        (show, title) = title.split(' - ', 1)

    summary = page.xpath('//meta[@property="og:description"]/@content')[0].replace('&amp;', '&')
    summary = String.DecodeHTMLEntities(summary)
    thumb = page.xpath('//meta[@property="og:image"]/@content')

    if len(thumb) < 1:
        thumb = None
    else:
        thumb = thumb[0].replace('/small/', '/large/')

    try:
        air_date = page.xpath('//div[@class="playBoxConnectedToVideoMain"]//time/@datetime')[0].split('T')[0]
        air_date = Datetime.ParseDate(air_date).date()
    except:
        air_date = None

    # Airdate for Ã–ppet Arkiv
    if air_date == None:
        try:
            air_date = page.xpath("//span[@class='svt-video-meta']//time/@datetime")[0].split('T')[0]
            air_date = Datetime.ParseDate(air_date).date()
        except:
            air_date = None

    try:
        duration = page.xpath("//a[@id='player']/@data-length")
        duration = int(duration[0]) * 1000
    except:
        duration = None
        pass

    if show:
        return EpisodeObject(
                   show = show,
                   title = title,
                   summary = summary,
                   duration = duration,
                   thumb = thumb,
                   originally_available_at = air_date
               )
    else:
        return VideoClipObject(
                   title = title,
                   summary = summary,
                   duration = duration,
                   thumb = thumb,
                   originally_available_at = air_date
               )

####################################################################################################
def MediaObjectsForURL(url):
    mo = []
    
    for resolution in [720, 576, 432, 288]:
        mo.append(
            MediaObject(
                parts = [
                    PartObject(
                        key = 
                            HTTPLiveStreamURL(
                                Callback(
                                    PlayVideo,
                                    url = url,
                                    resolution = resolution,
                                    client = Client.Platform
                                )
                            )
                    )
                ],
                video_resolution = resolution,
                audio_channels = 2,
                optimized_for_streaming = True
            )
        )
    
    return mo

####################################################################################################
def PlayVideo(url, resolution='720', client='', **kwargs):
    try:
        if "?" in url:
            json_obj = JSON.ObjectFromURL(url + '&output=json')
        else:
            json_obj = JSON.ObjectFromURL(url + '?output=json')
    except:
        raise Ex.MediaNotAvailable
        
    playlist_url = None
    for item in json_obj['video']['videoReferences']: 
        if '.m3u8' in item['url']:
            playlist_url = item['url']
            break
        elif '.f4m' in item['url']:
            playlist_url = item['url'].replace("/z/", "/i/").replace("manifest.f4m", "master.m3u8")

    if playlist_url:        
        if client in ['iOS', 'Safari']:
            # These clients can handle both https connections and
            # URLs which contain another URL as parameter
            #
            # Ideally, all clients should be in this path!
            return Redirect(playlist_url)
        else:
            streams = GetHLSStreams(playlist_url)
            
            min_resolution_diff = 1000000000 # some huge number to get it started
            hls_url             = streams[0]['url']
            
            for stream in streams:
                diff = abs(resolution - stream['resolution'])
                if diff < min_resolution_diff:
                    min_resolution_diff = diff
                    hls_url             = stream['url']

            cookies = HTTP.CookiesForURL(playlist_url)
    
            headers               = {}
            headers['Cookie']     = cookies
            headers['User-Agent'] = USER_AGENT

            playlist = HTTP.Request(hls_url, headers = headers, cacheTime = 0).content
            
            if not 'https' in playlist:
                # No https connection and the extra URLs have
                # been stripped out
                # -> Just redirect and let the client handle everything
                return Redirect(hls_url)
            else:
                # We need to apply a patch for clients without SSL support
                # Note that this includes PMS when transcoding/remuxing for a client,
                # for example for Chromecast
                return Redirect(
                    Callback(CreatePatchedPlaylist, url = hls_url, cookies = cookies)
                )
    else:
        raise Ex.MediaNotAvailable

####################################################################################################
def GetHLSStreams(url):
    headers               = {}
    headers['User-Agent'] = USER_AGENT

    streams = []

    try:
        playlist = HTTP.Request(url, headers = headers, cacheTime = 0).content
    except:
        raise Ex.MediaNotAvailable

    # Parse the m3u8 file to get:
    # - URL
    # - Resolution
    # - Bitrate
    for line in playlist.splitlines():
        if "BANDWIDTH" in line:
            stream            = {}
            stream["bitrate"] = int(Regex('(?<=BANDWIDTH=)[0-9]+').search(line).group(0))        

            if "RESOLUTION" in line:
                stream["resolution"] = int(Regex('(?<=RESOLUTION=)[0-9]+x[0-9]+').search(line).group(0).split("x")[1])
            else:
                stream["resolution"] = 0
        
        elif line.startswith("#"):
            pass
        
        elif ".m3u8" in line:
            path = ''
            if not line.startswith("http"):
                path = url[ : url.rfind('/') + 1]

            try:
                stream["url"] = path + line
                streams.append(stream)
            except:
                pass

    sorted_streams = sorted(streams, key = lambda stream: stream["bitrate"], reverse = True)        

    return sorted_streams

####################################################################################################
def CreatePatchedPlaylist(url, cookies):
    headers               = {}
    headers['Cookie']     = cookies
    headers['User-Agent'] = USER_AGENT

    original_playlist = HTTP.Request(url, headers = headers, cacheTime = 0).content
    new_playlist = ''

    for line in original_playlist.splitlines():
        if line.startswith('#EXT-X-KEY'):
            original_key_url = RE_KEY_URI.search(line).groups()[0]
            new_key_url = Callback(ContentOfURL, url = original_key_url, cookies = cookies)
            new_playlist = new_playlist + line.replace(original_key_url, new_key_url) + '\n'
        elif line.startswith('http'):
            original_segment_url = line
            new_segment_url = Callback(ContentOfURL, url = original_segment_url, cookies = cookies)
            new_playlist = new_playlist + new_segment_url + '\n'
        else:
            new_playlist = new_playlist + line + '\n'
    
    return new_playlist
    
####################################################################################################
def ContentOfURL(url, cookies):
    headers               = {}
    headers['Cookie']     = cookies
    headers['User-Agent'] = USER_AGENT
    
    return HTTP.Request(url, headers = headers, cacheTime = 0).content
