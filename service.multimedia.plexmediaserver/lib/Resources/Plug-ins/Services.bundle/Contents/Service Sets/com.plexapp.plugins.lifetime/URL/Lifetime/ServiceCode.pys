from hashlib import sha1
import binascii, hmac

RE_PLAYLIST = Regex('"videos":\[(.+?)"}\]},"', Regex.DOTALL)

SMIL_NS = {'a': 'http://www.w3.org/2005/SMIL21/Language'}
RESOLUTIONS = ['720', '540', '432', '404', '360']

AudioStreamObject.language_code = Locale.Language.English

####################################################################################################
def NormalizeURL(url):

  return url.split('#')[0].split('?')[0]

####################################################################################################
def TestURLs():

  test_urls = []
  data = HTML.ElementFromURL('http://www.mylifetime.com/video')

  for url in data.xpath('//div[contains(@class, "video-image-wrapper")]//a[starts-with(@href, "http")]/@href'):
    test_urls.append(url)

    if len(test_urls) > 2:
      break

  return test_urls

####################################################################################################
def MetadataObjectForURL(url):

  # Not all input URLs are full URLs, grab the full URL
  try:
    url = HTML.ElementFromURL(url).xpath('//meta[@property="og:url"]/@content')[0]
  except Ex.HTTPError, e:
    if e.code == 403:
      raise Ex.MediaNotAuthorized
    else:
      raise Ex.MediaNotAvailable

  video = GetJSON(url)

  if 'pdk_flash_url' in video:
    pdk_url = '%s&format=script' % video['pdk_flash_url']
  elif 'release_url' in video:
    pdk_url = '%s&format=script' % video['release_url']
  else:
    raise Ex.MediaNotAvailable

  data = JSON.ObjectFromURL(pdk_url)

  title = data['title']
  summary = data['description']
  thumb = data['defaultThumbnailUrl'] if 'defaultThumbnailUrl' in data else ''
  duration = data['duration']
  date = Datetime.FromTimestamp(float(data['pubDate'])/1000).date()
  content_rating = data['ratings'][0]['rating'] if len(data['ratings']) > 0 else None

  if data['AETN$mrssLengthType'] == "Episode":
    show = data['AETN$seriesNameGlobal']

    if 'AETN$episode' in data:
      index = int(data['AETN$episode'])
    else:
      index = None

    return EpisodeObject(
      title = title,
      show = show,
      summary = summary,
      absolute_index = index,
      duration = duration,
      originally_available_at = date,
      content_rating = content_rating,
      thumb = Resource.ContentsOfURLWithFallback(thumb)
    )
  else:
    return VideoClipObject(
      title = title,
      summary = summary,
      duration = duration,
      originally_available_at = date,
      content_rating = content_rating,
      thumb = Resource.ContentsOfURLWithFallback(thumb)
    )

####################################################################################################
def MediaObjectsForURL(url):

  media_objects = []

  for res in RESOLUTIONS:

    media_objects.append(
      MediaObject(
        parts = [PartObject(key=Callback(PlayVideo, url=url, res=res))],
        container = Container.MP4,
        video_codec = VideoCodec.H264,
        video_resolution = res,
        audio_codec = AudioCodec.AAC
      )
    )

  return media_objects

####################################################################################################
@indirect
def PlayVideo(url, res):

  try:
    # Not all input URLs are full URLs, grab the full URL
    url = HTML.ElementFromURL(url).xpath('//meta[@property="og:url"]/@content')[0]
  except:
    raise Ex.MediaNotAvailable

  video = GetJSON(url)

  if 'pdk_flash_url' in video:
    smil_url = video['pdk_flash_url'].replace('switch=rtmp', 'format=SMIL')
  elif 'release_url' in video:
    smil_url = video['release_url'].split('?')[0]
    smil_url = '%s?mbr=true&format=SMIL&assetTypes=medium_video_s3&metafile=true' % smil_url
  else:
    raise Ex.MediaNotAvailable

  sig = sign_url(smil_url)
  smil_url = '%s&sig=%s' % (smil_url, sig)

  #Log('the value of smil_url is %s' %smil_url)

  smil = XML.ElementFromURL(smil_url)
  available_res = smil.xpath("//a:video//@height", namespaces=SMIL_NS)

  if len(available_res) < 1:
    raise Ex.MediaNotAvailable

  closest = min((abs(int(res) - int(i)), i) for i in available_res)[1]
  video_url = None

  if smil.xpath('//a:ref', namespaces=SMIL_NS)[0].get('title') == "Geographic Restriction":
    raise Ex.MediaGeoblocked
  video_url = smil.xpath('//a:video[@height="%s"]//@src' %closest, namespaces=SMIL_NS)[0]

  # try falling back to the default //video/@src if we have one
  # (like for older style flv based videos)
  if not video_url:
    video_url = smil.xpath('//a:video/@src', namespaces=SMIL_NS)[0]
  
  # now if we still don't have a video_url bail
  if not video_url:
    raise Ex.MediaNotAvailable

  if video_url.startswith('http://'):
    return IndirectResponse(VideoClipObject, key=video_url)

  raise Ex.MediaNotAvailable

####################################################################################################
def GetJSON(url):

  try:
    content = HTTP.Request(url).content.decode('utf8','replace')
  except:
    raise Ex.MediaExpired

  # Movies and TV have different JSON data, so code for premium may vary
  try:
    playlist = RE_PLAYLIST.search(content).group(1)
  except:
    raise Ex.MediaNotAvailable

  playlist = '%s"}' % playlist
  playlist = '{"entries":[%s]}' % playlist
  playlist_json = JSON.ObjectFromString(playlist)

  for video in playlist_json['entries']:

    if video['path'] in url:

      blocked = video['is_premium'] if ('is_premium' in video and video['is_premium'] is not None) else '0'
      blocked = video['video_behind_wall'] if ('video_behind_wall' in video and video['video_behind_wall'] is not None) else '0'

      if blocked != '0':
        raise Ex.MediaNotAvailable

      return video

####################################################################################################
def sign_url(url):

  hmac_key = 'crazyjava'
  SEC_HEX = '733363723374' #'s3cr3t'
  expiration = get_expiration()
  path = url.split('http://link.theplatform.com/s/')[1].split('?')[0]
  sign_data = binascii.unhexlify('00'+expiration+binascii.hexlify(path).lower())
  sig = hmac.new(hmac_key, sign_data, sha1)
  sigHEX = sig.hexdigest()
  signature = '00' + expiration + sigHEX + SEC_HEX
  return signature

####################################################################################################
def get_expiration(auth_length=600):

  current_time = Datetime.TimestampFromDatetime(Datetime.Now()) + auth_length
  expiration = ('%0.2X' % current_time).lower()
  return expiration
