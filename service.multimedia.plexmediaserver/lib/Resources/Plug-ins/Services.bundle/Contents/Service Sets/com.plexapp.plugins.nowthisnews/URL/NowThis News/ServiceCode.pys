MediaObject.container = Container.MP4
MediaObject.video_codec = VideoCodec.H264
MediaObject.audio_codec = AudioCodec.AAC
MediaObject.audio_channels = 2
MediaObject.optimized_for_streaming = True

API_URL = 'https://api.nowthismedia.com/v1/collections/all/assets/%s'
HTTP_HEADERS = {'X-NT-API-TOKEN': '9000ede3a923ce7f8329b8089652b111'}

####################################################################################################
def NormalizeURL(url):

	return url.split('?')[0]

####################################################################################################
def MetadataObjectForURL(url):

	slug = url.split('/')[-1]
	json_obj = JSON.ObjectFromURL(API_URL % (slug), headers=HTTP_HEADERS)['video']

	title = json_obj['name']
	summary = json_obj['description']
	thumb = json_obj['thumbnail_medium']
	duration = int(float(json_obj['duration'])*1000)
	originally_available_at = Datetime.ParseDate(json_obj['created_at']).date()

	return VideoClipObject(
		title = title,
		summary = summary,
		thumb = Resource.ContentsOfURLWithFallback(url=thumb),
		duration = duration,
		originally_available_at = originally_available_at
	)

####################################################################################################
def MediaObjectsForURL(url):

	return [
		MediaObject(
			parts = [
				PartObject(key=Callback(PlayVideo, url=url))
			]
		)
	]

####################################################################################################
@indirect
def PlayVideo(url, **kwargs):

	slug = url.split('/')[-1]
	json_obj = JSON.ObjectFromURL(API_URL % (slug), headers=HTTP_HEADERS)['video']

	return IndirectResponse(VideoClipObject, key=json_obj['path'])
