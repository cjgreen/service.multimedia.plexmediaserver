MP4_URL = "http://gv1.pinkbike.org/v%s/31/pbvid-%s.mp4"

RE_FLASHVARS = Regex('var flashvars = ({.+?)u:encodeURIComponent', Regex.DOTALL)

MediaObject.container = 'mp4'
MediaObject.video_codec = 'h264'
MediaObject.audio_codec = 'aac'
AudioStreamObject.language_code = Locale.Language.English

####################################################################################################
def NormalizeURL(url):

    return url

####################################################################################################
def MetadataObjectForURL(url):

    data = GetDetails(url)
    title = data['title']
    summary = HTML.ElementFromURL(url).xpath('//meta[@name="description"]')[0].get('content')
    thumb = data['i']
    duration = int(float(data['dur'])*1000)

    return VideoClipObject(
        title = title,
        summary = summary,
        duration = duration,
        thumb = thumb
    )

####################################################################################################
def MediaObjectsForURL(url):

    return [
        MediaObject(
            parts = [PartObject(key=Callback(PlayVideo, url=url, res='720'))],
            video_resolution = '720'
        ),
        MediaObject(
            parts = [PartObject(key=Callback(PlayVideo, url=url, res='360'))],
            video_resolution = '360'
        )
    ]

####################################################################################################
def PlayVideo(url, res='720'):

    data = GetDetails(url)
    video_id = data['id']

    if res == '720':
        video_url = MP4_URL % ('1280', video_id)
    else:
        video_url = MP4_URL % ('f', video_id)

    return Redirect(video_url)

####################################################################################################
def GetDetails(url):

    content = HTTP.Request(url).content
    flashvars = RE_FLASHVARS.search(content)

    if not flashvars:
        raise Ex.MediaNotAvailable

    json = flashvars.group(1)
    json = '%s}' % json.strip().strip(',')
    json = json.replace('encodeURIComponent(', '')
    json = json.replace('"),', '",')

    details = JSON.ObjectFromString(json)
    return details

####################################################################################################
def TestURLs():

    test_urls = []
    data = XML.ElementFromURL('http://www.pinkbike.com/pinkbike_xml_feed.php')

    for link in data.xpath('//item/link'):
        if 'video' in link.text or 'Video' in link.text:
            test_urls.append(link.text)

        if len(test_urls) > 2:
            break

    return test_urls
