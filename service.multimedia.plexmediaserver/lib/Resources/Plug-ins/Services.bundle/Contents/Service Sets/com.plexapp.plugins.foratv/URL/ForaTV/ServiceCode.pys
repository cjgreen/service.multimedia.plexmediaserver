IPAD_HTTP_HEADERS = {'User-Agent': 'Mozilla/5.0 (iPad; CPU OS 6_0_1 like Mac OS X) AppleWebKit/536.26 (KHTML, like Gecko) Version/6.0 Mobile/10A523 Safari/8536.25'}
BASE_URL = "http://fora.tv"

RE_VIDEO_SRC = Regex('htmlVideoSrc.+?"([^"]+)')

####################################################################################################
def MetadataObjectForURL(url):

	try:
		page = HTML.ElementFromURL(url)
	except:
		raise Ex.MediaNotAvailable

	# Extract the details available from the various pages.
	title = page.xpath("//head//meta[@property='og:title']")[0].get('content')
	description = page.xpath("//head//meta[@name='description']")[0].get('content').strip()
	thumb = page.xpath("//head//meta[@property='og:image']")[0].get('content')

	return VideoClipObject(
		title = title,
		summary = description,
		thumb = thumb
	)

####################################################################################################
def MediaObjectsForURL(url):

	return [
		MediaObject(
			parts = [PartObject(key=Callback(PlayVideo, url=url))],
			video_codec = VideoCodec.H264,
			audio_codec = AudioCodec.AAC,
			container = Container.MP4,
			audio_channels = 2,
			optimized_for_streaming = True
		)
	]

####################################################################################################
@indirect
def PlayVideo(url):

	try:
		page = HTTP.Request(url).content
	except:
		raise Ex.MediaNotAvailable

	source = RE_VIDEO_SRC.search(page).group(1)

	if source.startswith("http") == False:
		source = BASE_URL + source

	c = ObjectContainer()
	c.add(VideoClipObject(
		items = [
			MediaObject(
				parts = [
					PartObject(key = source)
				]
			)
		]
	))

	c.http_headers = IPAD_HTTP_HEADERS
	return c
