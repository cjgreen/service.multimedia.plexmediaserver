FREECASTER_INFO_URL = "http://freecaster.tv/player/info/%s?source=freecaster"

####################################################################################################
def NormalizeURL(url):

	new_url = url.replace("www.freecaster.tv","extreme.com")
	return new_url

####################################################################################################
def MetadataObjectForURL(url):

	xml_info = GetInfo(url)

	# Extract the available meta data from the page
	title = xml_info.xpath("//title/text()")[0]
	try: description = xml_info.xpath("//description/text()")[0]
	except: description = None
	thumb = xml_info.xpath("//posterframe/path/text()")[0]
	date = xml_info.xpath("//onlinedate/text()")[0]
	date = Datetime.ParseDate(date)

	return VideoClipObject(
		title = title,
		summary = description,
		thumb = thumb,
		originally_available_at = date
	)

####################################################################################################
def MediaObjectsForURL(url):

	return [
		MediaObject(
			video_codec = VideoCodec.H264,
			audio_codec = AudioCodec.AAC,
			container = Container.MP4,
			bitrate = 5120,
			video_resolution = 1080,
			audio_channels = 2,
			parts = [PartObject(key=Callback(PlayVideo, url=url, res='full-hd'))]
		),
		MediaObject(
			video_codec = VideoCodec.H264,
			audio_codec = AudioCodec.AAC,
			container = Container.MP4,
			bitrate = 2560,
			video_resolution = 720,
			audio_channels = 2,
			parts = [PartObject(key=Callback(PlayVideo, url=url, res='hd'))]
		),
		MediaObject(
			video_codec = VideoCodec.H264,
			audio_codec = AudioCodec.AAC,
			container = Container.MP4,
			bitrate = 1280,
			video_resolution = 360,
			audio_channels = 2,
			parts = [PartObject(key=Callback(PlayVideo, url=url, res='sd'))]
		),
		MediaObject(
			video_codec = VideoCodec.H264,
			audio_codec = AudioCodec.AAC,
			container = Container.MP4,
			bitrate = 640,
			video_resolution = 180,
			audio_channels = 2,
			parts = [PartObject(key=Callback(PlayVideo, url=url, res='ld'))]
		)
	]

####################################################################################################
def PlayVideo(url, res):

	info = GetInfo(url)
	mp4_streams = info.xpath('//html_streams/stream')

	if len(mp4_streams) < 1:
		return None

	# Convert the requested resolution, into a suitable indexer into the mp4 list. It's possible that the requested quality
	# is not available. Therefore, we must clamp it to the size of the list.
	index = 0
	if res == 'sd':
	  index = 1
	elif res == 'hd':
	  index = 2
	elif res == 'full-hd':
	  index = 3
	index = max(0, min(index, len(mp4_streams)-1))

	# Redirect to the appropriate stream.
	return Redirect(mp4_streams[index].text)

####################################################################################################
def GetInfo(url):

	# Load the URL and extract the title identifier from the page.
	flash_vars = HTML.ElementFromURL(url).xpath('//link[@rel="video_src"]')[0].get('href')
	id = flash_vars.split('id=')[1].split('&')[0]
	# We could extract the necessary information from the page, but this could potentially fail
	# when the site changes. Instead, we will use the id and use the FREECASTER_INFO_URL so that
	# get the title information in a more friendly way.
	info_url = FREECASTER_INFO_URL % (id)
	xml_info = XML.ElementFromURL(info_url)

	return xml_info
