NAMESPACES = {'media': 'http://search.yahoo.com/mrss/'}
MRSS_URL = 'http://www.spike.com/feeds/mrss/?uri=%s&ref=www.spike.com'

RE_AMPERSANDS = Regex('&(?!amp;)')
RE_RES_BIT = Regex('x(\d+)_(\d+)_?[^._]*\.(mp4|flv)')

MediaObject.audio_channels = 2
MediaObject.optimized_for_streaming = True
####################################################################################################
def NormalizeURL(url):

	return url.split('?')[0]

####################################################################################################
def MetadataObjectForURL(url):

	try:
		html = HTML.ElementFromURL(url, cacheTime=CACHE_1HOUR)
	except:
		raise Ex.MediaNotAvailable

	title = html.xpath('//meta[@property="og:title"]/@content')[0]
	summary = html.xpath('//meta[@property="og:description"]/@content')[0]
	thumb = html.xpath('//meta[@property="og:image"]/@content')[0].split('?')[0]
	duration = html.xpath('//meta[@itemprop="duration"]/@content')[0]
	if duration:
		# This duration can be blank or be T3M7S format
		# But this is the only place to pull the duration on all pages without issues
		duration = duration.replace('T', '').replace('S', '')
		duration_1 = int(duration.split('M')[0]) * 60
		duration = (duration_1 + int(duration.split('M')[1])) * 1000
	else:
		video_player_box = html.xpath('//div[@class="video_player"]')
		if len(video_player_box) < 1:
			raise Ex.MediaExpired

		uri = video_player_box[0].get('data-mgid')

		mrss_data = HTTP.Request(MRSS_URL % uri).content
		mrss_data = RE_AMPERSANDS.sub('&amp;', mrss_data)
		mrss_data = XML.ElementFromString(mrss_data)

		media_urls = mrss_data.xpath('//media:content[@medium="video"]', namespaces=NAMESPACES)
		duration = 0

		for segment in media_urls:
			duration = float(duration) + float(segment.get('duration'))

		duration = int(duration*1000)

	if '/full-episodes/' in url or '/episodes/' in url:
		show_title = html.xpath('//title')[0].text.split(' - ')[1]
		try:
			air_date = html.xpath('//li[@class="airDate"]//text()')[0].replace('Aired ', '')
			originally_available_at = Datetime.ParseDate(air_date).date()
		except:
			originally_available_at = None

		return EpisodeObject(
			show = show_title,
			title = title,
			summary = summary,
			duration = duration,
			thumb = Resource.ContentsOfURLWithFallback(thumb),
			originally_available_at = originally_available_at
		)

	elif '/video-clips/' in url:

		return VideoClipObject(
			title = title,
			summary = summary,
			duration = duration,
			thumb = Resource.ContentsOfURLWithFallback(thumb)
		)

	else:
		raise Ex.MediaNotAvailable

####################################################################################################
@deferred
def MediaObjectsForURL(url):
    try: 
        data = HTML.ElementFromURL(url)
        mgid = HTML.ElementFromURL(url, cacheTime=CACHE_1HOUR).xpath('//div[@class="video_player"]/@data-mgid')
    except:
        raise Ex.MediaNotAvailable

    mrss_data = HTTP.Request(MRSS_URL % mgid[0], cacheTime=CACHE_1HOUR).content
    mrss_data = RE_AMPERSANDS.sub('&amp;', mrss_data)
    mrss_data = XML.ElementFromString(mrss_data)
	
    media_urls = mrss_data.xpath('//media:content[@medium="video"]/@url', namespaces=NAMESPACES)
    available_streams = {}
        
    for media_url in media_urls:
        try:
            video_data = XML.ElementFromURL(media_url, cacheTime=CACHE_1HOUR)
        except:
            raise Ex.MediaNotAvailable

        renditions = video_data.xpath('//rendition')

        if len(renditions) < 1:
            raise Ex.MediaNotAvailable

        for rendition in renditions:
            rtmp_url = rendition.xpath('./src/text()')[0]
            # try to get the bitrate and height from the rtmp url first
            try: bitrate = RE_RES_BIT.search(rtmp_url).group(2)
            except: bitrate = rendition.get('bitrate')
            try: height = RE_RES_BIT.search(rtmp_url).group(1)
            except: height = rendition.get('height')
            if '/viacomspikestrm/' in rtmp_url:
                rtmp_url = rtmp_url.split('/viacomspikestrm/')[-1]
            elif '/mtvnorigin/' in rtmp_url:
                rtmp_url = rtmp_url.split('/mtvnorigin/')[-1]
            else:
                raise Ex.MediaNotAvailable

            # Set up to pull the type of video file so that it can work with flv or mp4
            part = {}
            part['duration'] = rendition.get('duration')
            part['height'] = height
            part['rtmp_url'] = rtmp_url
            part['clip_type'] = rtmp_url.split('.')[-1]

            if bitrate not in available_streams:
                available_streams[bitrate] = []
            available_streams[bitrate].append(part)

    #Log('the value of available_streams is %s' %available_streams)
    media_objects = []
    bitrates = [int(i) for i in available_streams.keys()]
    bitrates.sort(reverse=True)

    for bitrate in bitrates:

        parts = []

        for part in available_streams[str(bitrate)]:

            parts.append(
                PartObject(
                    key = RTMPVideoURL(
                        url='rtmpe://viacommtvstrmfs.fplive.net:1935/viacommtvstrm/',
                        clip='%s:%s' % (part['clip_type'], part['rtmp_url'])
                    ),
                    duration = int(part['duration'])*1000
                )
            )

            video_resolution = int(part['height'])

        media_objects.append(
            MediaObject(
                parts = parts,
                bitrate = bitrate,
                video_resolution = video_resolution
            )
        )

    return media_objects
