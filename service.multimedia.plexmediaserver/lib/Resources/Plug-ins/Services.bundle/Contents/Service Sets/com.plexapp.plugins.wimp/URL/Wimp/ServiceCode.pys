HTTP_HEADERS = {'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/36.0.1985.143 Safari/537.36'}
HTTP_HEADERS_IPAD = {'User-Agent': 'Mozilla/5.0 (iPad; CPU OS 6_0_1 like Mac OS X) AppleWebKit/536.26 (KHTML, like Gecko) Version/6.0 Mobile/10A523 Safari/8536.25'}

RE_FILE_ID = Regex('"file"(?:\:|,) *"([^\"]+)"')

####################################################################################################
def NormalizeURL(url):

	return url

####################################################################################################
def MetadataObjectForURL(url):

	data = HTTP.Request(url, headers=HTTP_HEADERS).content
	html = HTML.ElementFromString(data)

	yt_iframe = html.xpath('//iframe[contains(@src, "youtube.com/embed")]/@src')

	if len(yt_iframe) > 0:
		return URLService.MetadataObjectForURL(yt_iframe[0])
	elif RE_FILE_ID.search(data):
		url = RE_FILE_ID.search(data).group(1)

		# If this is a YouTube video we use the YouTube URL Service to handle the request
		if 'youtube.com/' in url:
			return URLService.MetadataObjectForURL(url)
		# NOTE: We check for '.flv' here (because we're not in the iPad version of the website), but we use the mp4 file in MediaObjectsForURL and PlayVideo!
		elif '.flv' not in url:
			raise Ex.MediaNotAvailable
	else:
		raise Ex.MediaNotAvailable

	title = html.xpath('//meta[@property="og:title"]/@content')[0]
	summary = html.xpath('//meta[@property="og:description"]/@content')[0]
	thumb = html.xpath('//meta[@property="og:image"]/@content')[0]

	return VideoClipObject(
		title = title,
		summary = summary,
		thumb = Resource.ContentsOfURLWithFallback(url=thumb)
	)

####################################################################################################
def MediaObjectsForURL(url):

	return [
		MediaObject(
			parts = [
				PartObject(key=Callback(PlayVideo, url=url))
			],
			container = Container.MP4,
			video_codec = VideoCodec.H264,
			video_resolution = 'sd',
			audio_codec = AudioCodec.AAC,
			audio_channels = 2,
			optimized_for_streaming = True
		)
	]

####################################################################################################
@indirect
def PlayVideo(url):

	url = url.replace('http://www.', 'http://m.')
	data = HTTP.Request(url, headers=HTTP_HEADERS_IPAD).content
	html = HTML.ElementFromString(data)

	video = html.xpath('//video/@src|//video/source/@src')

	if len(video) > 0:
		video_url = video[0]
	elif RE_FILE_ID.search(data):
		video_url = RE_FILE_ID.search(data).group(1)
	else:
		raise Ex.MediaNotAvailable

	return IndirectResponse(VideoClipObject, key=video_url)
