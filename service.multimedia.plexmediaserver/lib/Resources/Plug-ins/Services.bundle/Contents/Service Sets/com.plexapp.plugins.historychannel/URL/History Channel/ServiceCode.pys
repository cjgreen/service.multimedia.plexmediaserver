from hashlib import sha1
import binascii, hmac

RE_PLAYLIST = Regex("_videoPlayer.play\('(.+?)', '(video|locked)'")
RE_PLAYLIST2 = Regex('var playlist = \[(.+?)\]', Regex.DOTALL)
RE_VIDEO_ID = Regex('\-(\d+)(#\d+)?$')
RE_BASE = Regex('meta base="(rtmp.+)"')

SMIL_NS = {"a":"http://www.w3.org/2005/SMIL21/Language"}
RESOLUTIONS = ["540","432","360"]

AudioStreamObject.language_code = Locale.Language.English

####################################################################################################
def NormalizeURL(url):

  return url.split('?')[0]

####################################################################################################
def MetadataObjectForURL(url):

  try:
    content = HTTP.Request(url).content
  except:
    raise Ex.MediaNotAvailable

  smil_url = GetSMILURL(url)
  releaseURL = '%s&format=script' % smil_url
  data = JSON.ObjectFromURL(releaseURL)

  thumb = data['defaultThumbnailUrl'] if 'defaultThumbnailUrl' in data else ''
  summary = data['description']
  duration = data['duration']
  date = Datetime.FromTimestamp(float(data['pubDate'])/1000).date()
  content_rating = data['ratings'][0]['rating'] if len(data['ratings']) > 0 else None
  title = data['title']

  return VideoClipObject(
    title = title,
    summary = summary,
    duration = duration,
    originally_available_at = date,
    content_rating = content_rating,
    thumb = Resource.ContentsOfURLWithFallback(thumb)
  )

####################################################################################################
def MediaObjectsForURL(url):
  media_objects = []

  for res in RESOLUTIONS:
    media_objects.append(
      MediaObject(
        parts = [PartObject(key=Callback(PlayVideo, url=url, res=res))],
        container = Container.MP4,
        video_codec = VideoCodec.H264,
        video_resolution = res,
        audio_codec = AudioCodec.AAC
      )
    )
  return media_objects

####################################################################################################
@indirect
def PlayVideo(url, res='540'):

  try:
    content = HTTP.Request(url).content
  except:
    raise Ex.MediaExpired

  smil_url = GetSMILURL(url)
  smil_url = smil_url.replace('switch=hds', 'format=SMIL')
  sig = sign_url(smil_url)
  smil_url += '&sig='+sig
  #Log('the value of smil_url is %s' %smil_url)

  smil = XML.ElementFromURL(smil_url)

  # Check for expired
  expired = smil.xpath('//*[@*[contains(., "Expired") or contains(., "expired")]]')
  if len(expired) > 0:
    raise Ex.MediaExpired

  available_res = smil.xpath("//a:video//@height", namespaces=SMIL_NS)
  if len(available_res) < 1:
    raise Ex.MediaNotAvailable
  closest = min((abs(int(res) - int(i)), i) for i in available_res)[1]
  video_url = None

  if smil.xpath('//a:ref', namespaces=SMIL_NS)[0].get('title') == "Geographic Restriction":
    raise Ex.MediaGeoblocked
  video_url = smil.xpath('//a:video[@height="%s"]//@src' %closest, namespaces=SMIL_NS)[0]

  # try falling back to the default //video/@src if we have one
  # (like for older style flv based videos)
  if not video_url:
    video_url=smil.xpath('//a:video/@src', namespaces=SMIL_NS)[0]
  
  # now if we still don't have a video_url bail
  if not video_url:
    raise Ex.MediaNotAvailable

  if video_url.startswith('http://'):
    return IndirectResponse(VideoClipObject, key=video_url)
  else:
    raise Ex.MediaNotAvailable

####################################################################################################
# SOME OF THE VIDEOS USE THE A&E FORMAT SO SEARCH BOTH METHODS FOR URL AND SKIP THOSE THAT ARE BLOCKED
def GetSMILURL(url):

    try:
        content = HTTP.Request(url).content.decode('utf8','replace')
    except:
        raise Ex.MediaExpired

    # The Regex for this pull is created to only pull videos that are unlocked and have the word 'video'
    # immediately following the smil_url. Videos that are locked have the word 'locked' immediately following the smil_url
    try:
        (smil_url, status) = RE_PLAYLIST.search(content).groups()
    except:
        status = None

    if status == 'locked':
        raise Ex.MediaNotAvailable
    elif status == 'video':
        return smil_url
    else:
        try:
            playlist = RE_PLAYLIST2.search(content).group(1)
            playlist = "{'entries':[%s]}" % playlist.strip().replace('\n', '')
            playlist_json = JSON.ObjectFromString(playlist)

            if playlist_json['entries'][0]['premium'] == 'true':
                raise Ex.MediaNotAuthorized
            else:
                releaseURL = playlist_json['entries'][0]['videoURLs']['releaseURL'].split('?')[0]
                releaseURL = '%s?switch=hds&mbr=true' % releaseURL

                return releaseURL
        except:
           raise Ex.MediaNotAvailable 

    raise Ex.MediaNotAvailable

####################################################################################################
def sign_url(url):

  hmac_key = 'crazyjava'
  SEC_HEX = '733363723374' #'s3cr3t'
  expiration = get_expiration()
  path = url.split('http://link.theplatform.com/s/')[1].split('?')[0]
  sign_data = binascii.unhexlify('00'+expiration+binascii.hexlify(path).lower())
  sig = hmac.new(hmac_key, sign_data, sha1)
  sigHEX = sig.hexdigest()
  signature = '00' + expiration + sigHEX + SEC_HEX
  return signature

####################################################################################################
def get_expiration(auth_length=600):

  current_time = Datetime.TimestampFromDatetime(Datetime.Now()) + auth_length
  expiration = ('%0.2X' % current_time).lower()
  return expiration
####################################################################################################
def TestURLs():

  test_urls = []
  data = HTML.ElementFromURL('http://www.history.com/shows/pawn-stars/videos')

  for url in data.xpath('//li[contains(@class,"slider-item")]//a[starts-with(@data-href, "http")]/@data-href'):
    test_urls.append(url)

    if len(test_urls) > 2:
      break

  return test_urls
