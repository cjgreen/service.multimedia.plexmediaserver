HTTP_HEADERS = {'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/33.0.1750.117 Safari/537.36'}
RE_SXX_EXX = Regex('Season (\d+).+Episode (\d+)')

####################################################################################################
def NormalizeURL(url):

	if not '/redirect/fep?videoid=VDKA' in url:
		return url.split('?')[0]
	else:
		return url

####################################################################################################
def MetadataObjectForURL(url):

	try:
		html = HTML.ElementFromURL(url, headers=HTTP_HEADERS, cacheTime=CACHE_1HOUR)
	except:
		raise Ex.MediaNotAvailable

	# Expired and unavailable media redirects to the home page. Instead of catching (multiple)
	# redirects we check if there is a 'og:url' HTML element.
	og_url = html.xpath('//meta[@property="og:url"]')

	if len(og_url) < 1:
		raise Ex.MediaNotAvailable

	if 'Error' in html.xpath('//title/text()[1]|//h1/text()[last()]')[0]:
		raise Ex.MediaNotAvailable

	episode_title = html.xpath('//div[@class="video_title"]/text()|//h1/text()[last()]|//h2[@id="video_title"]/text()') # Xpath queries for: ABC|ABC Family|ABC News

	if len(episode_title) < 1 or episode_title[0] == 'abcfamily.com':
		raise Ex.MediaExpired

	episode_title = episode_title[0].strip()
	show_title = html.xpath('//meta[@name="title"]/@content|//h2/a/text()')[0].split('  ')[0]
	summary = html.xpath('//meta[@property="og:title"]/@content')[0]

	try:
		sxx_exx = html.xpath('//title/text()')[0]
		(season, index) = RE_SXX_EXX.search(sxx_exx).groups()
	except:
		season = None
		index = None

	try:
		duration = html.xpath('//span[contains(@class, "duration")]/text()')[0]
		duration = Datetime.MillisecondsFromString(duration)
	except:
		duration = None

	try:
		airdate = html.xpath('//span[contains(@class, "airdate")]/text()')[0].split(' ')[-1]
		airdate = Datetime.ParseDate(airdate).date()
	except:
		airdate = None

	try:
		rating = html.xpath('//span[contains(@class, "rating")]/text()')[0].split(' ')[0]
	except:
		rating = None

	thumb = html.xpath('//meta[@property="og:image"]/@content')[0]

	if thumb == '':
		video_id = GetVideoId(url)
		thumb = 'http://static.east.abc.go.com/service/image/ratio/id/VDKA%s/dim/1200.16x9.jpg' % (video_id)

	source_title = 'ABC Family' if 'abcfamily' in url else 'ABC'

	return EpisodeObject(
		title = episode_title,
		show = show_title,
		duration = duration,
		season = int(season) if season else None,
		index = int(index) if index else None,
		content_rating = rating,
		originally_available_at = airdate,
		summary = summary,
		thumb = Resource.ContentsOfURLWithFallback(thumb),
		source_title = source_title
	)

####################################################################################################
def MediaObjectsForURL(url):

	if '/VDKA' in url:
		video_id = url.split('/VDKA')[-1].split('/')[0]
	elif '/redirect/fep?videoid=VDKA' in url:
		video_id = url.split('videoid=VDKA')[-1].split('#')[0]
	else:
		video_id = GetVideoId(url)

	if not video_id:
		raise Ex.MediaNotAvailable

	storage_id = 1561

	strings = (
		'/2020/', '#SH559026',
		'/good-morning-america/', '#SH5587637',
		'/nightline/', '#SH5584743',
		'/this-week', '#SH559082',
		'/what-would-you-do/', '#SH5555951',
		'/world-news-tonight', '#SH5585921', '#SH55228120'
	)

	for s in strings:
		if s in url:
			storage_id = 1841
			break

	if 'abcfamily' in url:
		storage_id = 1571

	f4m_url = 'http://cdnapi.kaltura.com/p/585231/sp/58523100/playManifest/entryId/%s/format/http/protocol/http/cdnHost/cdnbakmi.kaltura.com/storageId/%d/uiConfId/8628152/tags/uplynk/a/a.f4m' % (video_id, storage_id)

	return [
		MediaObject(
			protocol = 'hls',
			container = 'mpegts',
			video_codec = VideoCodec.H264,
			video_resolution = '1080',
			audio_codec = AudioCodec.AAC,
			audio_channels = 2,
			optimized_for_streaming = True,
			parts = [
				PartObject(
					key = Callback(PlayVideo, f4m_url=f4m_url, post_url=f4m_url, ext='m3u8')
				)
			]
		)
	]

####################################################################################################
@indirect
def PlayVideo(f4m_url=None, **kwargs):

	if not f4m_url:
		raise Ex.MediaNotAvailable

	try:
		xml = XML.ElementFromURL(f4m_url)
		video_url = xml.xpath('//a:media/@url', namespaces={'a': 'http://ns.adobe.com/f4m/1.0'})[0]
		return IndirectResponse(VideoClipObject, key=HTTPLiveStreamURL(url=video_url))
	except:
		raise Ex.MediaNotAvailable

####################################################################################################
def GetVideoId(url):

	html = HTML.ElementFromURL(url, headers=HTTP_HEADERS, cacheTime=CACHE_1HOUR)

	# Loop over attribute values, because we can't grab the right one directly because of a missing namespace declaration(?)
	for value in html.xpath('//div[@id="vp2k_container"]/@*'):
		if value.startswith('VDKA'):
			return value.split('VDKA')[-1]

	return None
