CONFIG_URL = '%s.config'
IGN_NS = {'smil': 'http://www.w3.org/2001/SMIL20/Language'}
RE_VIDEO_URL = Regex('var videoUrl = "([^"]+)')

####################################################################################################
def NormalizeURL(url):

	if 'widgets.ign.com' in url and '?url=' in url:
		url = String.Unquote(url.split('?url=')[-1])
	elif not '/videos/' in url:
		page = HTTP.Request(url).content
		video_url = RE_VIDEO_URL.search(page)

		if video_url:
			return video_url.group(1)

	return url.split('?')[0]

####################################################################################################
def MetadataObjectForURL(url):

	try:
		json_obj = JSON.ObjectFromURL(CONFIG_URL % url)
	except:
		raise Ex.MediaNotAvailable

	html = HTML.ElementFromURL(url)

	title = html.xpath('//meta[@property="og:title"]/@content')[0].split(' - ')[0]
	summary = html.xpath('//meta[@property="og:description"]/@content')[0]
	thumb = html.xpath('//meta[@property="og:image"]/@content')[0]

	try:
		duration = html.xpath('//span[@class="video-duration"]/text()')[0].strip()
		duration = Datetime.MillisecondsFromString(duration)
	except:
		duration = None

	try:
		date = html.xpath('//div[@class="sub-details"]/text()')[0].strip()
		originally_available_at = Datetime.ParseDate(date).date()
	except:
		originally_available_at = None

	return VideoClipObject(
		title = title,
		summary = summary,
		thumb = Resource.ContentsOfURLWithFallback(thumb),
		duration = duration,
		originally_available_at = originally_available_at
	)

####################################################################################################
def MediaObjectsForURL(url):

	return [
		MediaObject(
			parts = [PartObject(key=Callback(PlayVideo, url=url, bitrate=5000000))],
			container = Container.MP4,
			video_resolution = '720',
			#aspect_ratio = '1.78',
			bitrate = 5000,
			video_codec = VideoCodec.H264,
			audio_codec = AudioCodec.AAC,
			audio_channels = 2,
			optimized_for_streaming = True
		),
		MediaObject(
			parts = [PartObject(key=Callback(PlayVideo, url=url, bitrate=3000000))],
			container = Container.MP4,
			video_resolution = '540',
			#aspect_ratio = '1.78',
			bitrate = 3000,
			video_codec = VideoCodec.H264,
			audio_codec = AudioCodec.AAC,
			audio_channels = 2,
			optimized_for_streaming = True
		),
		MediaObject(
			parts = [PartObject(key=Callback(PlayVideo, url=url, bitrate=1700000))],
			container = Container.MP4,
			video_resolution = '360',
			#aspect_ratio = '1.78',
			bitrate = 1700,
			video_codec = VideoCodec.H264,
			audio_codec = AudioCodec.AAC,
			audio_channels = 2,
			optimized_for_streaming = True
		),
		MediaObject(
			parts = [PartObject(key=Callback(PlayVideo, url=url, bitrate=1200000))],
			container = Container.MP4,
			video_resolution = '360',
			#aspect_ratio = '1.78',
			bitrate = 1200,
			video_codec = VideoCodec.H264,
			audio_codec = AudioCodec.AAC,
			audio_channels = 2,
			optimized_for_streaming = True
		),
		MediaObject(
			parts = [PartObject(key=Callback(PlayVideo, url=url, bitrate=500000))],
			container = Container.MP4,
			video_resolution = '360',
			#aspect_ratio = '1.78',
			bitrate = 500,
			video_codec = VideoCodec.H264,
			audio_codec = AudioCodec.AAC,
			audio_channels = 2,
			optimized_for_streaming = True
		)
	]

####################################################################################################
@indirect
def PlayVideo(url, bitrate):

	url = URLService.NormalizeURL(url)

	try:
		json_obj = JSON.ObjectFromURL(CONFIG_URL % url)
	except:
		raise Ex.MediaNotAvailable

	media_url = json_obj['playlist']['media']['url']
	video_url = None

	if '.smil' in media_url:
		smil = XML.ElementFromURL(media_url)
		available_bitrates = smil.xpath('//smil:video[@system-bitrate]/@system-bitrate', namespaces=IGN_NS)

		if len(available_bitrates) < 1:
			raise Ex.MediaNotAvailable

		closest = min((abs(int(bitrate) - int(i)), i) for i in available_bitrates)[1]
		video_url = smil.xpath('//smil:video[@system-bitrate="%s"]/@src' % closest, namespaces=IGN_NS)[0]

	else:
		video_url = media_url

	if not video_url.startswith('http://'):
		video_url = 'http://%s' % video_url

	return IndirectResponse(VideoClipObject, key=video_url)
