VIDEO_URL = 'http://xhamster.com/movies/%s/.html'

####################################################################################################
def NormalizeURL(url):

	if '/xembed.php' in url:
		video_id = url.split('video=')[-1]
		return VIDEO_URL % video_id
	else:
		return url.split('?')[0]

####################################################################################################
def MetadataObjectForURL(url):

	try:
		html = HTML.ElementFromURL(url)
	except:
		raise Ex.MediaNotAvailable

	# A missing mp4 link means we don't have a video (or a low-res flv)
	mp4_url = html.xpath('//div[@class="noFlash"]/a/@href')

	if len(mp4_url) < 1:
		raise Ex.MediaNotAvailable

	title = html.xpath('//title/text()')[0].rsplit(' - ', 1)[0].strip()

	# A missing description tag means we don't have a video
	summary = html.xpath('//meta[@name="description"]/@content')

	if len(summary) < 1:
		raise Ex.MediaNotAvailable

	summary = summary[0].split('xHamster.com! ', 1)[-1].strip()

	if summary.startswith('xHamster'):
		summary = None

	thumb = html.xpath('//video/@poster')
	thumb = thumb[0] if len(thumb) > 0 else ''

	return VideoClipObject(
		title = title,
		summary = summary,
		thumb = Resource.ContentsOfURLWithFallback(thumb),
		genres = ['XXX','Adult','18+'],
		content_rating = 'X'
	)

####################################################################################################
def MediaObjectsForURL(url):

	return [
		MediaObject(
			parts = [
				PartObject(key=Callback(PlayVideo, url=url))
			],
			container = Container.MP4,
			video_codec = VideoCodec.H264,
			video_resolution = 'sd',
			audio_codec = AudioCodec.AAC,
			audio_channels = 2,
			optimized_for_streaming = True if Client.Product not in ['Plex Web'] else False
		)
	]

####################################################################################################
@indirect
def PlayVideo(url):

	try:
		html = HTML.ElementFromURL(url)
	except:
		raise Ex.MediaNotAvailable

	mp4_url = html.xpath('//div[@class="noFlash"]/a/@href')

	if len(mp4_url) < 1:
		raise Ex.MediaNotAvailable

	return IndirectResponse(VideoClipObject, key=mp4_url[0])
